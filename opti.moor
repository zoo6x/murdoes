\
\\ Optimizer
\
								\\ Debug output
: ..S .S ;
: .S blue ..S norm ;						\ Blue stack

								\\ Regallocing and assembling states
: (%>)     | INTERPRETING >cfa@ >>> REGALLOCING >< does ;	\ ( xt -- )		Sets word's register allocation semantics to its execution semantics
: %>       ' (%>) ;						\ ( "<name>" -- )	Sets register allocation semantics to execution semantics
: <%       latest (%>) ;					\ ( -- )		Sets latest word's register allocation semantics to execution semantics

: (:)      : ;							\ 			Redefine : to enable REGALLOCING state
: :        (:) <% ;

: ($>)     | INTERPRETING >cfa@ >>> ASSEMBLING >< does ;	\ ( xt -- )		Sets word's register allocation semantics to its execution semantics
: $>       ' ($>) ;						\ ( "<name>" -- )	Sets register allocation semantics to execution semantics
: <$       latest ($>) ;					\ ( -- )		Sets latest word's register allocation semantics to execution semantics

: INTERPRETING! INTERPRETING state! ;

: REGALLOCING! REGALLOCING state! ;
:: REGALLOCING!!  code rstate REGALLOCING mov.i, ret, <% <$	\ ( -- )		Sets state to REGALLOCING without address interpreter involvement

: ASSEMBLING! ASSEMBLING state! ;
:: ASSEMBLING!!  code rstate ASSEMBLING mov.i, ret, <%		\ ( -- )		Sets state to ASSEMBLING without address interpreter involvement

: DEALLOCING! DEALLOCING state! ;
:: DEALLOCING!!  code rstate DEALLOCING mov.i, ret, <%		\ ( -- )		Sets state to DEALLOCING without address interpreter involvement

: regalloc REGALLOCING! execute interpreting! INTERPRETING! ;	\ ( xt -- )		Sets STATE to REGALLOCING for the XT

: :%       : compile interpreting! ;

								\\ Register allocation
:: #regs     10 val						\ Number of CPU registers
:: regs      adr #regs allot					\ Register alias count
:: used-regs adr #regs allot					\ Used registers
:: save-regs adr #regs allot					\ Save registers
: #r       regs + c@ ;						\ ( r -- #r )		Returns number of references for a register
: ^        | regs + | c@ 1+ >< c!  used-regs + 1 >< c! ;	\ ( r -- )		Increments reference count for a register. TODO: Add overflow/underflow checks
: v        regs + | c@ | if 1- >< c!				\ ( r -- )		Decrements reference count for a register. TODO: Or just use cells, not bytes
           else a11a501 .abort then ;
: v^       regs + | c@ | if 1- | if >< c! 0 else _ _ 1 then 	\ ( r -- 1|0 )		If register is not aliased, then it can be reused
           else a11a502 .abort then ;
								\ 			otherwise decrement reference count and return 0
: ?^       regs #regs for | c@ I >< -leave _ 1+ over		\ ( -- r | ABORT )	Allocates a new register, if one is available
           0add bada110c .abort
           then >< _ #regs >< - | ^ ;
: ∧        | ^ ;						\ ( r -- r )		Increments reference count for a register, leaving register on the stack
: ∨        v ;
: |∨       | v ;						\ ( r -- r )		Decrement reference count for a register, leaving register on the stack
: ∨∧       | v^ ;						\ ( r -- r 1|0 )	Free register and reallocate it, if it's not aliased. If aliased, returns 1
: ?∧       ?^ ;
: ⊻        1- { ∨ } ;						\ ( r # -- #-1 )	Frees a register
: &^       | #r 1- if _ ?^ then ;				\ ( r -- r|r` )         Returns the same register if it has exactly one reference, or a new one
: &∧       &^ ;
: ∨?∧      ∨∧ if else _ ?∧ then ;				\ ( r -- r|r')		Allocates new register, if R is aliased

: .regs    regs #regs for | c@ . 1+ over _ ;
: .used-regs used-regs #regs for | c@ . 1+ over _ ;

								\\ Stacks for control structures
: dirupload >< | { | | if for | { I - 1+ #| >| >s } over _	\ ( an ... a1 n s -- a1 ... an n )	Copy N elements from data stack onto the specified stack
            else _ _ then } | <<< >< >s  ;
: revupload >< | { | if for | I 1+ #| >< >s over		\ ( an ... a1 n s -- an ... a1 n )	Copy N elements from data stack onto the specified stack
            else _ then } | <<< >< >s  ;

: offload   | if for ∨ over else _ then ;
: diroffload dirupload offload ;				\ ( an ... a1 n -- an ... a1 n )	Decrease reference count for registers in sequence
: revoffload revupload offload ;

: download | s> | { | if for | s> ∧ >< over _ else _ _ then } ; \ ( s -- a1 ... an n ) (s: a1 ... an n -- ) Pop N elements off the specified stack onto the data stack
: onload  | s> | { | if for | s> >< over _ else _ _ then } ;	\ ( s -- a1 ... an n ) (s: a1 ... an n -- ) Pop N elements w/o changing references

:: tmp-stack 100 stack						\ Temporary stack, for transfers between other stacks
: >tmp    tmp-stack >s ;
: tmp>    tmp-stack s> ;

:: ret-stack 100 stack						\ Return stack
: >ret    ret-stack >s ;
: ret>    ret-stack s> ;

:: cyc-stack 100 stack						\ Cycle stack
: >cyc    cyc-stack >s ;
: cyc>    cyc-stack s> ;

:: phi-stack 100 stack						\ Phi junction stack
: >phi    phi-stack >s ;
: phi>    phi-stack s> ;

								\\ Variables
:: opt-debug        0 var					\ Specifies whether debug output is enabled
:: opt-index        0 var					\ Index inside current word, for branch visualization
:: opt-index-word   0 var					\ Index of the beginning of the word
:: opt-index-last   0 var					\ Last index in the current register allocation and assembling invocation
:: opt-lit          0 var					\ Holds 1-cell literal, offset or other data between regallocing and assembling
:: opt-xt           0 var					\ Holds XT of the currently executing REGALLOCING/ASEMBLING word
:: opt-branch       0 var					\ Holds latest branch offset
:: opt-phi-move     0 var					\ Flag indicating whether φ requires moving regiters
:: opt-phi-temp-reg 0 var					\ Temporary register for φ moves
:: opt-phi-save-reg 0 var					\ Saved register for φ moves
:: opt-phi-dest-reg 0 var					\ Register to be assigned from the saved register
:: opt-phi-forward  0 var					\ Flag indicating whether the φ-junction is forward or backward

:: opt-pass         0 var					\ Optimization pass
:: OPT-PASS-INITCODEGEN 0 val					\ 0 = Initial code generation
:: OPT-PASS-BRANCHLEN   2 val					\ 2 = Branch length optimization (can run multiple times)

								\\ Branch fixup
:: #labels 1000 val						\ TODO: Check if running out of label space. Need '>' to be implemented			
:: label-offset adr #labels cells allot	
:: branch-size adr #labels allot
:: start-adr-prologue 0 var					\ Address of the prologue, which is compiled before the word
:: start-adr 0 var						\ Address of the beginning of compiled word (16-bytes aligned preferably)
: opt-index-word!  opt-index @ opt-index-word ! ;
: label-offset@ cells label-offset + @ ; 			\ ( index -- ofs )
: label-offset! opt-pass @ OPT-PASS-INITCODEGEN = if
		  start-adr @ here >< - 
		  label-offset opt-index @ cells + !
	        then ;
: branch-is-short@ branch-size + c@ ;				\ ( index -- 1|0 )	Returns whether the compiled branch at index is short (1) or long (0)
: branch-is-short! branch-size + 1 >< c! ;			\ ( index -- )		Marks branch as short
: shift-label-offsets						\ ( shift start-label -- )	Increase label offsets by SHIFT starting with the specified label
          | cells label-offset + >< opt-index-last @ ><
	  - | if for
	  	| @ | 1+ if >>| + >< | <<< ! else _ then cell+
	  over _ else _ _ then _ ;
: ofs-is-long ffffffffffffff80 and | if ffffffffffffff80 - then ;	\ ( ofs -- 1|0)	Return 0 if ofs is [-128d, 127d]

: .dump
  cr ." ==== " latest >name count type cr
  start-adr @ | here >< - 22 emit dump 22 emit cr ;

:: bfx-stack 100 stack						\ Branch fixup stack
: >bfx    bfx-stack >s ;
: bfx>    bfx-stack s> ;

: branch-adr cells label-offset + @ start-adr @ + ;		\ ( index -- adr )	Returns absolute address for the index
: branch-mark  | purple . norm >bfx here >bfx ;			\ ( branch-index -- )	Puts current code address and branch index onto the branch fixup stack
: branch-resolve branch-adr >| - >< 4 - 4! ;			\ ( addr index -- )	Fixes branch offset at ADDR-4, generating offset pointing to branch-index
: branch-offset	 branch-adr here - ;				\ ( index -- )		Computes offset in bytes between HERE and byte offset of instruction at index
: fixup-branches begin bfx> bfx> | 1+ while branch-resolve  repeat _ _ ;

: .((     compile opt-debug compile @ [compile] if ; immediate  \			Words between .(( and )) will be executed if opt-debug flag is set
: ).(     [compile] else ; immediate
: ))      [compile] then ; immediate

								\\ Debug output
: %.debug  \ .((							\ ( xt -- )		Debug print word name and stack
           cr
	   opt-index @ purple . norm
           1b emit 5b emit 30 emit 34 emit 47 emit
           >name count white type norm

           1b emit 5b emit 31 emit 33 emit 47 emit
	   \ ).( _ )) 
	   ;

: %.S      \ .((
           1b emit 5b emit 31 emit 39 emit 47 emit
           ..S
           1b emit 5b emit 33 emit 39 emit 47 emit
	   blue .regs norm
           1b emit 5b emit 37 emit 32 emit 47 emit
	   52 emit 3a emit bl emit ret-stack .stack
           1b emit 5b emit 37 emit 39 emit 47 emit
	   43 emit 3a emit bl emit cyc-stack .stack
           1b emit 5b emit 38 emit 38 emit 47 emit
	   cf emit 86 emit 3a emit bl emit phi-stack .stack
           1b emit 5b emit 31 emit 30 emit 39 emit 47 emit
	   54 emit 3a emit bl emit tmp-stack .stack
           1b emit 5b emit 31 emit 32 emit 36 emit 47 emit
           ." ¦ "
           1b emit 5b emit 31 emit 32 emit 38 emit 47 emit
	   .(( ).( label-offset opt-index-word @ cells + @ .0 here .. ))
	   \ )) 
	   ;

: %.used-regs  \ .(( 
           cr
           1b emit 5b emit 33 emit 39 emit 47 emit
	   yellow .used-regs norm cr
	   \ )) 
	   ;

								\\ Regallocing semantics definitions
: noop ;

: $        here (exec) ASSEMBLING ' | >r does r> _		\ ( "<name>" --  )	Creates new semantics for assembling state
           compile interpreting!
	   ] ;
: $;       compile ASSEMBLING!! compile exit [compile] [ ; immediate

' exit INTERPRETING >cfa@ REGALLOCING ' exit does
' exit INTERPRETING >cfa@ ASSEMBLING ' exit does
' exit INTERPRETING >cfa@ DEALLOCING ' exit does

' interpreting! INTERPRETING >cfa@ REGALLOCING ' interpreting! does
' interpreting! INTERPRETING >cfa@ ASSEMBLING ' interpreting! does
' interpreting! INTERPRETING >cfa@ DEALLOCING ' interpreting! does

: assm     ;
$ assm     $;

: %        here (exec) REGALLOCING ' | >r does 			\ ( "<name>" --  )	Creates new semantics for register allocation state,
           ['] assm ASSEMBLING   >cfa@ ASSEMBLING r> | >r does
           ['] assm INTERPRETING >cfa@ DEALLOCING r> | >r does r>
           compile interpreting! 				\			which equals to execution semantics of its constituents
	   | opt-xt !

	   compile label-offset! 
	   compile opt-index-word! 

	   [compile] literal
	   compile %.debug
           ] ;

: %;       
           compile %.S						

           compile ASSEMBLING!!
           opt-xt @
	   compile,
	   compile interpreting!

           compile DEALLOCING!!
           opt-xt @
	   compile,
	   compile interpreting!

	   compile opt-index
	   compile 1+!

	   compile REGALLOCING!!

	   compile exit [compile] [ ; immediate

: ;%								\			Finish REGALLOCING definition and start DEALLOCING definition
           [compile] %;
           here (exec) DEALLOCING opt-xt @ does
	   compile interpreting!
	   ] ; immediate

: ;%;
	   compile REGALLOCING!!

	   compile exit [compile] [ ; immediate

% noop %;
	   							\\ Register allocation primitives
								\\ Register allocation
% |        1+ { | ∧ } %;					\ ( r # -- r r #+1 )	Duplicates register (creates an alias)
% _        ⊻ %;							\ ( r # -- #-1)

% ><       { >< } %;						\ ( r1 r2 # -- r2 r2 # )
% <<<      { <<< } %;						\ ( r1 r2 r3 # -- r3 r1 r2 # )
% >>>      { >>> } %;						\ ( r1 r2 r3 # -- r2 r3 r1 # )
% >|       1+ { >| ∧ } %;				 	\ ( r1 r2 # -- r1 r2 r1 #+1 )
% >>|      1+ { >>| ∧ } %;				 	\ ( r1 r2 r3 # -- r1 r2 r3 r1 #+1 )
% >|>|     1+ 1+ { >|>| ∧ >< ∧ >< } %;

% >r       1- { >ret } %;
% r>       1+ { ret> } %;


% lit      @skip | opt-lit ! opt-index 1+! .(( .. ).( _ )) 1+ { ?∧ } %;	\ ( # -- r #+1 )	Allocates new register

% branch   @skip 1+ | opt-branch ! opt-index 1+! .(( .. ).( _ )) %;		\ ( -- )
% ?branch  @skip 1+ | opt-branch ! opt-index 1+! .(( .. ).( _ )) ⊻ %;		\ ( r # -- #-1 )
% -?branch @skip 1+ | opt-branch ! opt-index 1+! .(( .. ).( _ )) ⊻ %;		\ ( r # -- #-1 )

% (if)     >< { 1- phi-stack revupload } >< 1+ %;		\			Upload stack as if after ?BRANCH
% (else-pre)
           tmp-stack diroffload %;
% (else-post)
           phi-stack download
	   phi-stack revoffload
	   phi-stack download
	   tmp-stack download
	   phi-stack revoffload %;
% (then)   %;
% (begin)  phi-stack revupload %;				\			Upload stack as it is now
% (until)  %;
% (again)  %;
% (ahead)  %;
% (while)  >< { 1- phi-stack revupload } >< 1+ %;		\			Upload stack as if after ?BRANCH
% (-leave) >< { 1-
           tmp-stack revupload
	   phi-stack onload
	   tmp-stack onload
	   phi-stack revupload #_
	   phi-stack revupload #_ } >< 1+
           @skip | opt-branch ! opt-index 1+! .. ⊻ %;
% (repeat-pre)
           phi-stack download
	   tmp-stack revoffload %;
% (repeat-post)
           offload
	   tmp-stack download %;
% (continue) %;
% (break)  %;
% (for)    1- { | &∧ | >cyc }					\ ( r # -- #-1 )	Takes counter off the stack TODO: Save counter on another stack
           <<< { { phi-stack revupload } } >>> ;%
           { _ _ } ;%;
% I        1+ { cyc> ∧ | >cyc } %;
% (over)   @skip | opt-branch ! opt-index 1+! .. ;%
           { cyc> ∨ } ;%;
% (over-post) %;

% +        { 							\ ( rs1 rs2 # -- rs1 rs2 rd #+1 )
           >< ∨∧ if | <<< >< |∨ >< else				\			Try to allocate rs1 as rd, then rs2, then a new register
	   >< ∨∧ if | else
	   ?∧ then then }
	   1+ ;%
	   { { _ _ } } 1- 1- ;%;				\ ( -- rd #-1 )

% -        { 							\ ( rs1 rs2 # -- rs1 rs2 rd #+1 )
           >< ∨∧ if | <<< >< |∨ >< else				\			Try to allocate rs1 as rd, then rs2, then a new register
	   >< ∨∧ if | else
	   ?∧ then then }
	   1+ ;%
	   { { _ _ } } 1- 1- ;%;				\ ( -- rd #-1 )

% 1+       { | ∨?∧ } ;% { >< _ } ;%;				\ 			Increment and decrement do not change register allocation
% 1-       { | ∨?∧ } ;% { >< _ } ;%;				\			Although, a new register is allocated if the destination is aliased

								\\ Stubs to ignore debug output words in the optimizer for now
% ,        ⊻ %;							\ ( r # -- #-1 )	Frees the parameter
% emit     ;% ⊻ ;%;						\ ( r # -- #-1 )	Frees the parameter

% cr %;
% ??       %;							\ ( r # -- #-1 )	Frees the parameter
% ..       ⊻ %;							\ ( r # -- #-1 )	Frees the parameter
% .        ⊻ %;							\ ( r # -- #-1 )	Frees the parameter
% .S %;
% yellow   %;
% norm     %;


								\\ Assembling
								\ Arithmetic and logic
								
								\ CAUTION! Assembling words should leave the stack as it was passed, do not add or drop items!
								\          Deallocing semantics should set up the stack properly, if needed

: .---     cr %.S ;
: .label   purple . norm ;
: .lit     blue . norm ;
: .r       yellow ." r" . bs norm ;
: .r,      yellow ." r" . bs ." , " norm ;
: .rr      yellow ." r" . bs ." , r" . norm ;
: .inst    green count type norm tab ;				\ ( str -- )		Print instruction string

: .mov     " mov" .inst ;
: .movrr   .mov .rr ;

: ¦        >< ;							\ Swap source and destination registers, in optimizer they are in reverse order compared to assembler

								\\ Prologue and epilogue
: prologue,							\ ( an ... a1 n -- )	Based on input parameters and used register map compiles a prologue
          " |," .inst |, cr %.S
          used-regs #regs for | c@ if				\			Push all used registers, but not parameters and outputs
	  	" push" .inst | used-regs - | .r push,
		cr { %.S }
	  then 1+ over _					

          | if for						\			Load input parameters from Forth stack into registers
	  	" load" .inst | .r
		#1 >< load, off,
		cr %.S
	  over else _ then
	  cr %.S
;

: epilogue,
	  | if for						\			Store output parameters onto Forth stack
	  	" store" .inst | .r
		| #0 >< store, on, ∨ 
		cr %.S 
          over else _ then								

          used-regs #regs + 1- #regs for | c@ if		\			Push all pushed registers (not parameters and outputs)
	  	" pop" .inst | used-regs - | .r pop,
		cr { %.S }
	  then 1- over _					

	  " _," .inst _, cr %.S					\			Move TOS into rtop, if needed

	  " ret" .inst ret, cr %.S
								
;

$ noop     .(( " nop" .inst ).( nop, )) $;

$ +        { >>> >|>| - if <<< >|>| -				\ ( rs1 rs2 rd )	Assemble +
           if							\			RD <> RS1, RS2		mov rd, rs1	add rd, rs1
	   { >|>| } | { <<< }
	   >>> >< >|
	   .(( .--- .movrr .--- " add" .inst .rr
	   ).( ¦ mov, ¦ add, ))
           else							\			RD = RS2
           <<< >|>|
	   .(( .--- " add" .inst .rr
	   ).( ¦ add, ))
	   then
	   else							\			RD = RS1
           <<< >|>|
	   .(( .--- " add" .inst .rr
	   ).( ¦ add, ))
	   then } $;

$ -        { >>> >|>| - if <<< >|>| -				\ ( rs1 rs2 rd )	Assemble -
           if							\			RD <> RS1, RS2		mov rd, rs1	sub rd, rs1
	   { >|>| } | { <<< }
	   >>> >|
	   .(( .--- .movrr .--- " sub" .inst .rr
	   ).( ¦ mov, ¦ sub, ))
	   else							\			RD = RS2
	   >< <<< >|
	   .(( .--- " sub" .inst .rr .--- " neg" .inst .r
	   ).( ¦ sub, neg, ))
	   then
	   else							\			RD = RS1
	   <<< >|>|
	   .(( .--- " sub" .inst .rr
	   ).( ¦ sub, ))
	   then } $;

$ 1+       { >|>| - if >|>|
           .(( .movrr .---
	   ).( ¦ mov, ))
	   then |
	   .(( " inc" .inst .r
	   ).( inc, ))
	   } $;

$ 1-       { >|>| - if >|>|
           .(( .movrr .---
	   ).( ¦ mov, ))
	   then |
	   .(( " dec" .inst .r
	   ).( dec, ))
	   } $;

$ lit      { |  opt-lit @ ><
           .(( .mov .r, .lit
	   ).( ¦ mov.i, ))
	   } $;

$ emit     { |
           .(( " emit" .inst .r
	   ).( 90 ` _ ))
	   } $;

								\ φ-junction

: φ
           1 opt-phi-move !
	   -1 opt-phi-save-reg !
	   -1 opt-phi-temp-reg !
	   -1 opt-phi-dest-reg !
           | phi> | >phi
	   - if
		   fee bad57ac .abort
	   else
		   phi-stack download
		   phi-stack dirupload
		   phi-stack diroffload
		   tmp-stack dirupload
		   _
		   phi> | if for
			   phi> >|>|
			   - if
				   opt-phi-move @ if
					   0 opt-phi-move !
					   ?∧ opt-phi-temp-reg !
					   |  opt-phi-temp-reg @
					   .(( .movrr .--- ).( ¦ mov, ))
					   | opt-phi-save-reg !
					   .(( .movrr .--- ).( ¦ mov, ))
				   else
					   >| opt-phi-save-reg @ - if
						   .(( .movrr .--- ).( ¦ mov, ))
					   else
						   | opt-phi-dest-reg !
						   _ _
					   then
				   then
			   else
				   _ _
			   then
		   over else _ then
		   opt-phi-dest-reg @ 1+ if
		   	   opt-phi-temp-reg @ opt-phi-dest-reg @
			   .(( .movrr .--- ).( ¦ mov, ))
		   then
		   opt-phi-move @ if else opt-phi-temp-reg @ ∨ then
		   opt-phi-forward @ if tmp-stack onload offload else tmp-stack onload then
		   phi-stack onload
		   opt-phi-forward @ if phi-stack revupload #_ phi-stack download else #_ then
           then
	   ;

: <φ       0 opt-phi-forward ! φ ;
: >φ       1 opt-phi-forward ! φ ;

								\ Control

$ (if)     { | |
           .(( " test" .inst .rr
	   ).( ¦ test, ))
	   } $;

$ ?branch  { opt-branch @ opt-index @ +
           .(( " jz " .inst .label
	   ).(
	   opt-pass @
	   | OPT-PASS-INITCODEGEN = if _
	   	0 .z lj, branch-mark
	   else
	   | OPT-PASS-BRANCHLEN = if _
	   	| label-offset@
		ofs-is-long if label-offset@ .z lj, 
		else
		opt-index-word @ branch-is-short@ if else -4 opt-index-word @ 1+ shift-label-offsets opt-index-word @ branch-is-short! then
		label-offset@
		here 2 + start-adr @ - - .z j, 
		then
	   then 
	   then 
	   ))
	   } $;

$ -?branch { opt-branch @ opt-index @ +
           .(( " jnz" .inst .label
	   ).(
	   opt-pass @
	   | OPT-PASS-INITCODEGEN = if _
	   	0 .nz lj, branch-mark
	   else
	   | OPT-PASS-BRANCHLEN = if _
	   	| label-offset@
		ofs-is-long if label-offset@ .nz lj, 
		else
		opt-index-word @ branch-is-short@ if else -4 opt-index-word @ 1+ shift-label-offsets opt-index-word @ branch-is-short! then
		label-offset@
		here 2 + start-adr @ - - .nz j, 
		then
	   then 
	   then 
	   ))
	   } $;

$ branch   { opt-branch @ opt-index @ +
           .(( " jmp" .inst .label
	   ).(
	   opt-pass @
	   | OPT-PASS-INITCODEGEN = if _
	   	0 ljmp, branch-mark
	   else
	   | OPT-PASS-BRANCHLEN = if _
	   	| label-offset@
		ofs-is-long if label-offset@ ljmp, 
		else
		opt-index-word @ branch-is-short@ if else -3 opt-index-word @ 1+ shift-label-offsets opt-index-word @ branch-is-short! then
		label-offset@
		here 2 + start-adr @ - - sjmp, 
		then
	   then 
	   then 
	   ))
	   } $;


$ (for)    { >|>| - if
           >|>|
	   .(( .movrr
	   ).( ¦ mov, ))
           then } $;
$ (over)
           {
	   cyc> | >cyc
	   .(( " dec" .inst .r .---
	   ).( dec, ))
           opt-index @ 1+
	   .(( " jz" .inst .label .---
	   ).(
	   opt-pass @
	   | OPT-PASS-INITCODEGEN = if _
	   	0 .z lj, branch-mark
	   else
	   | OPT-PASS-BRANCHLEN = if _
	   	| label-offset@
		ofs-is-long if label-offset@ .z lj, 
		else
		opt-index-word @ branch-is-short@ if else -4 opt-index-word @ 1+ shift-label-offsets opt-index-word @ branch-is-short! then
		label-offset@
		here 2 + start-adr @ - - .z j, 
		then
	   then
	   then
	   ))
	   }
           <φ
           { .---
           opt-branch @ opt-index @ + 1+
	   .(( " jmp" .inst .label
	   ).(
	   opt-pass @
	   | OPT-PASS-INITCODEGEN = if _
	   	0 ljmp, branch-mark
	   else
	   | OPT-PASS-BRANCHLEN = if _
	   	| label-offset@
		ofs-is-long if label-offset@ ljmp, 
		else
		\ A dirty hack here. Since we have two jumps at one index, second jump adds 1 to word index to store short/long branch flag
		\ Thankfully, (over) occupies two indexes because it also stores branch offset
		\ TODO: Think how to do it properly. This might not work well for ELSE
		\ -3 is the difference between long and short jump instruction sizes
		opt-index-word @ 1+ branch-is-short@ if else -3 opt-index-word @ 1+ 1+ shift-label-offsets opt-index-word @ 1+ branch-is-short! then
		label-offset@
		here 2 + start-adr @ - - sjmp, 
		then
	   then
	   then
	   ))
	   } $;

$ (while)  { | |
           .(( " test" .inst .rr
	   ).( ¦ test, ))
	   } $;

$ (then)   >φ $;
$ (again)  <φ $;
$ (repeat-pre) <φ $;
$ (repeat-post) $;
								
								\\ Register allocation and assembling
: regalloc-init							\ ( -- )		Initializes array of referenced registers
           regs #regs 0 fill
	   label-offset #labels cells -1 fill
	   branch-size #labels 0 fill
	   here start-adr-prologue !
	   here start-adr !
	   tmp-stack empty
	   ret-stack empty
	   cyc-stack empty
	   phi-stack empty
	   bfx-stack empty
	   -1 -1 >bfx >bfx
           rsp ∧ _						\ 			RSP should not be used as a general-purpose register
	   rstack0 ∧ _
	   rstack ∧ _
           used-regs #regs 0 fill
;

: :^       regalloc-init ;
: ^.>
           1 opt-debug !

	   OPT-PASS-INITCODEGEN opt-pass !
	   0 opt-index !
	   0 opt-index-word !
           cr %.S
	   ' regalloc
	   ['] exit %.debug %.S %.used-regs
;

: ^>
           0 opt-debug !

	   cr white ." PASS=0 Register allocation" norm
	   OPT-PASS-INITCODEGEN opt-pass !
	   0 opt-index !
	   0 opt-index-word !

	   tmp-stack dirupload
	   cr %.S
	   ' | >r regalloc
	   opt-index-word @ 1+ opt-index-last !
	   fixup-branches
	   ['] exit %.debug %.S cr %.used-regs
	   cr .dump

	   cr white ." PASS=1 Initial code generation" norm
	   OPT-PASS-BRANCHLEN opt-pass !
	   0 opt-index !
	   0 opt-index-word !
	   offload
	   tmp-stack download
	   tmp-stack dirupload
	   cr %.S
	   start-adr @ here!
	   r> | >r regalloc
	   ['] exit %.debug %.S %.used-regs
	   cr .dump

	   cr white ." PASS=2 Final code generation" norm
	   OPT-PASS-BRANCHLEN opt-pass !
	   0 opt-index !
	   0 opt-index-word !
	   offload
	   cr %.S
	   tmp-stack download
	   tmp-stack dirupload
	   cr %.S
	   start-adr @ here!
	   tmp-stack onload
	   cr %.S
	   prologue,
	   cr %.S

	   here  start-adr @ - 0 shift-label-offsets
	   r> regalloc
	   cr %.S
	   epilogue,
	   ['] exit %.debug %.S %.used-regs
	   cr .dump

;

