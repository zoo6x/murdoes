\
\\ Optimizer
\

\\ References
\ https://github.com/tarantool/tarantool/wiki/LuaJIT-Optimizations
\ https://medium.com/@AlexanderObregon/everything-you-need-to-know-about-register-allocation-in-c-27019602cc5c
\ https://langdev.stackexchange.com/questions/1441/what-are-the-disadvantages-of-using-ssa-form
\ https://docs.oracle.com/cd/E36784_01/html/E36859/gntae.html		AVX2 256-bit instructions, if needed

\\ Concepts

\\ Virtual registers
\ - Reference a CPU register or a (local?) memory slot
\ - Optimizer can change virtual reference without re-emitting SSA IR 
\   (for instance, if hint or statistics indicate that this exact VR shold be stored in register/memory)

\\ Stack changes
\ In IR generation (?) state each word returns
\ - Number of values taken of the stack
\ - Number of values put onto the stack
\ - Aliasing between new and old values, if any
\ ( -- [ new old ]... naliases nput ntaken)
\ This is needed only for code words, for Forth words everything is deduced from threaded code
\ - Words are
\   - inline: registers are allocated dynamically
\   - leaf: do not call other words (but may inline others)
\   - twig: non-leaf nodes, call other words that are already compiled

: ``       >< ` ` ;

\ #-taken #-put #-aliases [old-index new-index]

% |        1 ` 2 ` 2 `  0 0 ``  0 1 ``
% _        1 ` 0 ` 0 `
% ><       2 ` 2 ` 0 1 `` 1 0 ``

% lit      0 ` 1 ` 0 `
% emit     1 ` 0 ` 0 `

% +        2 ` 1 ` 0 `
% ,        1 ` 0 ` 0 `






