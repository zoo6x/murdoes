\
\\ Optimizer
\

\\ References
\ https://github.com/tarantool/tarantool/wiki/LuaJIT-Optimizations
\ https://medium.com/@AlexanderObregon/everything-you-need-to-know-about-register-allocation-in-c-27019602cc5c
\ https://langdev.stackexchange.com/questions/1441/what-are-the-disadvantages-of-using-ssa-form
\ https://en.wikipedia.org/wiki/Register_allocation

\\ Concepts

\\ Virtual registers
\ - Reference a CPU register or a (local?) memory slot
\ - Optimizer can change virtual reference without re-emitting SSA IR (register pressure optimization?)
\   (for instance, if hint or statistics indicate that this exact VR shold be stored in register/memory)

\\ Stack changes
\ In IR generation (?) state each word returns
\ - Number of values taken of the stack
\ - Number of values put onto the stack
\ - Aliasing between new and old values, if any
\ ( -- [ new old ]... naliases nput ntaken)
\ This is needed only for code words, for Forth words everything is deduced from threaded code
\ - Words are
\   - inline: registers are allocated dynamically
\   - leaf: do not call other words (but may inline others)
\   - twig: non-leaf nodes, call other words that are already compiled


								\\ Regallocing state
: %        here (exec) REGALLOCING ' does			\ ( "<name>" --  )	Creates new semantics for register allocation state,
           compile interpreting! ] ;				\			which equals to execution semantics of its constituents
: (%>)     | INTERPRETING >cfa@ >>> REGALLOCING >< does ;	\ ( xt -- )		Sets word's register allocation semantics to its execution semantics
: %>       ' (%>) ;						\ ( "<name>" -- )	Sets register allocation semantics to execution semantics
: <%       latest (%>) ;					\ ( -- )		Sets latest word's register allocation semantics to execution semantics

: REGALLOCING! REGALLOCING state! ;
: INTERPRETING! INTERPRETING state! ;
:: REGALLOCING!!  code rstate REGALLOCING mov.i, ret, <%	\ ( -- )		Sets state to REGALLOCING without address interpreter involvement

: regalloc REGALLOCING! ' execute interpreting! INTERPRETING! ;	\ ( -- )		Sets STATE to REGALLOCING for the next text interpreter word 

: :%       : compile interpreting! ;
: %;       compile REGALLOCING!! compile exit [compile] [ ; immediate

								\\ Register allocation
:: #regs   16 val						\ Number of CPU registers
:: regs    adr #regs allot						\ Register alias count
: +reg     regs + | c@ 1+ >< c! ; 				\ ( r -- )		Increments reference count for a register
: -reg     regs + | c@ 1- >< c! ; 				\ ( r -- )		Increments reference count for a register
:: vreg    0 var 						\ ( -- a-vr )		Variable holding latest allocated virtual register (VR)

: regs-init							\ ( -- )		Initializes array of referenced registers
          regs #regs 0 fill

;

:% ^       vreg @ | 1+ vreg ! %;				\ ( -- vr ) 		Returns current VR and increases next VR value
: :^       0 vreg ! ;
: ^>       regalloc ;


								\\ Regallocing state semantics
% |        >r | r> 1+ %;					\ ( r # -- r r #+1 )	Duplicates register (creates an alias)
% _        %;							\ ( r # -- #-1)		Frees a register

% ><       %;							\ ( r1 r2 # -- r2 r2 # ) Swaps registers

% lit      skip ^ %;						\ ( # -- r #+1 )	Allocates new register

% +        _ _ ^ %;						\ ( r1 r2 -- r3 )	Frees two registers and allocates one


% ,        %;							\ ( r -- )		TODO: WRONG! Stub for now
% emit     %;							\ ( r -- )		TODO: WRONG! Stub for now 

\\ Fibonacci sequence generator
\ 0, 1, 2, 3, 4, 5, 6,  7,  8,  9
\ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
: fib \ n	Fn = Fn-1 + Fn-2
  | if 0 1 >>> for >| + >< over _ then ;

\					0	1						
\ 424d30  |				0 0	2						
\ 424d38  ?branch	424db8		0	1						
\         (>mark)			0	1		S: 1	0			
\ 424d48  lit	0			0 1	2		S: 1	0			
\ 424d58  lit	1			0 1 2	3		S: 1	0			
\ 424d68  >>>				1 2 0	3		S: 1	0			
\ 424d70  (for)				1 2	2	R: 0	S: 1	0			
\         (<mark)			1 2	2	R: 0	S: 2	2 1	1	0	
\ 424d78: >|				1 2 1	3	R: 0	S: 2	2 1	1	0	
\ 424d80  +				1 2	2	R: 0	S: 2	2 1	1	0	
\ 424d88  ><				2 1	2	R: 0	S: 2	2 1	1	0	
\ 424d90  (over)	424d78		2 1	2		S: 2	2 1	1	0	
\         (<resolve)			2 1	2		S: 1	0			
\ 424da0  _				2	1		S: 1	0			
\ 424da8  branch	424dd0		2	1		S: 1	0			
\         (>resolve)			2	1						
\ 424dd0: exit				2	1						







