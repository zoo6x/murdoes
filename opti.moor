\
\\ Optimizer
\

								\\ Regallocing state
	   							\\ TODO: Do we need these at all?
: (%>)     | INTERPRETING >cfa@ >>> REGALLOCING >< does ;	\ ( xt -- )		Sets word's register allocation semantics to its execution semantics
: %>       ' (%>) ;						\ ( "<name>" -- )	Sets register allocation semantics to execution semantics
: <%       latest (%>) ;					\ ( -- )		Sets latest word's register allocation semantics to execution semantics

: REGALLOCING! REGALLOCING state! ;
: INTERPRETING! INTERPRETING state! ;
:: REGALLOCING!!  code rstate REGALLOCING mov.i, ret, <%	\ ( -- )		Sets state to REGALLOCING without address interpreter involvement

: regalloc REGALLOCING! ' execute interpreting! INTERPRETING! ;	\ ( -- )		Sets STATE to REGALLOCING for the next text interpreter word 

: :%       : compile interpreting! ;

								\\ Register allocation
:: #regs   10 val						\ Number of CPU registers
:: regs    adr #regs allot					\ Register alias count
: ^        regs + | c@ 1+ >< c! ; 				\ ( r -- )		Increments reference count for a register. TODO: Add overflow/underflow checks
: v        regs + | c@ 1- >< c! ; 				\ ( r -- )		Decrements reference count for a register
: ?^       regs #regs for | c@ leave 1+ over			\ ( -- r | ABORT )	Allocates a new register, if one is available
           0add bada110c .abort
           then _ #regs I - | ^ ;
: .regs    regs #regs for | c@ .. 1+ over _ ;

								\\ Stacks for control structures
: >#|>s	   >< | { for | I 1+ #| >< >s over } | <<< >< >s  ;	\ ( an ... a1 n s -- an ... a1 n )  Copy N elements from data stack onto the specified stack
           
:: ret-stack 100 stack						\ Return stack
: >ret    ret-stack >s ;
: ret>    ret-stack s> ;

:: cyc-stack 100 stack						\ Cycle stack
: >cyc    cyc-stack >s ;
: cyc>    cyc-stack s> ;

:: phi-stack 100 stack						\ Phi junction stack
: >phi    phi-stack >s ;
: phi>    phi-stack s> ;

: %.debug  >name count white type norm				\ ( xt -- )		Debug print word name and stack
           1b emit 5b emit 31 emit 31 emit 47 emit ;
: %.S      
           1b emit 5b emit 31 emit 39 emit 47 emit
           .S
           1b emit 5b emit 33 emit 39 emit 47 emit
	   .regs 
           1b emit 5b emit 37 emit 35 emit 47 emit
	   52 emit 3a emit bl emit ret-stack .stack
           1b emit 5b emit 38 emit 35 emit 47 emit
	   43 emit 3a emit bl emit cyc-stack .stack
           1b emit 5b emit 39 emit 35 emit 47 emit
	   cf emit 86 emit 3a emit bl emit phi-stack .stack
	   cr ;

								\\ Regallocing semantics definitions
: %        here (exec) REGALLOCING ' | >r does r>		\ ( "<name>" --  )	Creates new semantics for register allocation state,
           compile interpreting! 				\			which equals to execution semantics of its constituents
	   [compile] literal compile %.debug			\ DEBUG
           ] ;
: %;       compile %.S						\ DEBUG
           compile REGALLOCING!! compile exit [compile] [ ; immediate

	   							\\ Register allocation primitives
: ∧        | ^ ;						\ ( r -- r )		Increments reference count for a register, leaving it on the stack
: ∨        v ;
: ?∧       ?^ ;
: ⊻        1- { ∨ } ;						\ ( r # -- #-1 )	Frees a register

: regs-init							\ ( -- )		Initializes array of referenced registers
           regs #regs 0 fill
           rsp ∧ _						\ 			RSP should not be used as a general-purpose register
;
								\\ Syntactic sugar
: :^       regs-init ;
: ^>       regalloc ;

								\\ Register allocation implementation
% |        norm 1+ { | ∧ } %;					\ ( r # -- r r #+1 )	Duplicates register (creates an alias)
% _        ⊻ %;							\ ( r # -- #-1)

% ><       { >< } %;						\ ( r1 r2 # -- r2 r2 # )
% <<<      { <<< } %;						\ ( r1 r2 r3 # -- r3 r1 r2 # )
% >>>      { >>> } %;						\ ( r1 r2 r3 # -- r2 r3 r1 # )
% >|       1+ { >| ∧ } %;				 	\ ( r1 r2 # -- r1 r2 r1 #+1 )
% >>|      1+ { >>| ∧ } %;				 	\ ( r1 r2 r3 # -- r1 r2 r3 r1 #+1 )

% >r       1- { >ret } %;
% r>       1+ { ret> } %;

% lit      @skip .. 1+ { ?∧ } %;				\ ( # -- r #+1 )	Allocates new register

% branch   @skip .. %;						\ ( -- )		Branches do not allocate registers. MARK and RESOLVE do all work
% ?branch  @skip .. ⊻ %;					\ ( r # -- #-1 )	Branches do not allocate registers. MARK and RESOLVE do all work
% -?branch @skip .. ⊻ %;					\ ( r # -- #-1 )	Branches do not allocate registers. MARK and RESOLVE do all work

% (if)     %;
% (else)   %;
% (then)   %;
% (begin)  %;
% (until)  %;
% (again)  %;
% (ahead)  %;
% (while)  %;
% (leave)  %;
% (repeat) %;
% (continue) %;
% (break) %;
% (for)    1- { >cyc } %;					\ ( r # -- #-1 )	Takes counter off the stack TODO: Save counter on another stack
% (over)   @skip .. cyc> ∨ %;					\ ( -- )

% +        1- { ∨ ∨ ?∧ } %;					\ ( r1 r2 # -- r3 #-1 )	Frees two registers and allocates one
% 1+       %;							\ 			Increment and decrement do not change register allocation
% 1-       %;

% ,        ⊻ %;							\ ( r # -- #-1 )	Frees the parameter
% emit     ⊻ %;							\ ( r # -- #-1 )	Frees the parameter 

: noop ;
% noop %;

								\\ Simpler examples, w/o Phi junctions
: ..S .S ;
: .S blue ..S norm ;
: q + + ;
cold
:^ ?^ ?^ ?^ 3 ^> q
cold
: cs4 3 begin 30 emit 1- | continue 31 emit >< | break 32 emit | 1+ while 33 emit _ 1 1 repeat 34 emit then 35 emit ;
\ : cs5 41 3 begin 30 emit { 1+ ?? } 1- | continue 31 emit { 1+ ?? } 2 pick break 32 emit { 1+ ?? } | while 33 emit { 1+ ?? } repeat 34 emit { 1+ ?? } then _ 35 emit emit _ 36 emit ;
: cs5 41 3 begin 30 emit .S { 1+ } 1- | continue 31 emit .S { 1+ } >>| break 32 emit { 1+ } | 1+ while .S 33 emit _ >< _ 1 >< 2 .S repeat 34 emit { 1+ } then _ 35 emit red emit norm _ 36 emit ;
: cs50 41 3 begin { 1+ } 1- | continue { 1+ } >>| break { 1+ } | 1+ while _ >< _ 1 >< 2 repeat { 1+ } then _ emit _ ;
0 cs4 
1 cs4
cold
0 cs5 .S 
cold
1 cs5 .S 
cold
0 cs50 .S 
cold
1 cs50 .S 
cold
:^ ?^ 1 ^> cs50

								\\ Fibonacci sequence generator
								\ 0, 1, 2, 3, 4, 5, 6,  7,  8,  9
								\ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
								\ n	Fn = Fn-1 + Fn-2
: fib      | if 0 1 >>> for >| + >< over _ then ;
: fib3     | if { 0 1 2 } 1- 1- for >>> >>| >>| + + over <<< _ _ then noop ;
								\ 0, 1, 2, 3, 4,  5,  6,  7
								\ 0, 1, 2, 3, 6, 11, 20, 37

cold
:^ ?^ 1 ^> fib3

\ 600df00d 0c0de .abort

