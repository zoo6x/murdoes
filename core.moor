: \ 0 word drop ; immediate
: \\ 0 word drop ; immediate
\
\\ Moore Forth System
\
\\ Index:		Press <S-8>=<*> to navigate in Vim
\\ _core_core
\\ _var_val
\\ _states
\\ _control
\\ _search
\\ _print
\\ _assembler
\\ _memory
\\ _return_stack
\\ _loops
\\ _stack

								\\ Comments and debug output
: norm     1b emit 5b emit 30 emit 6d emit ;
: red      1b emit 5b emit 33 emit 31 emit 6d emit ;
: green    1b emit 5b emit 33 emit 32 emit 6d emit ;
: yellow   1b emit 5b emit 33 emit 33 emit 6d emit ;
: blue     1b emit 5b emit 33 emit 34 emit 6d emit ;
: purple   1b emit 5b emit 33 emit 35 emit 6d emit ;
: white    1b emit 5b emit 33 emit 37 emit 6d emit ;
: .\       0 word count blue type norm 0a emit ;
: .(       29 word count purple type norm ; immediate
: cr       0a emit ;
: tab      09 emit ;
: bs       08 emit ;
: .abort   red . . norm cr abort ;				\ ( code message -- )	Prints code and message as hexadecimal numbers and aborts
: ..       blue . norm ;
: ??       dup .. ;

								\\ Register assignment. Should be changed if register aliases are changed
: r0       01 ;							\ rcx = rtop
: rtop     01 ;
: r1       02 ;							\ rdx = rtmp
: rtmp     02 ;
: r2       00 ;							\ rax = rwork
: rwork    00 ;
: rstate   03 ;							\ rbx = rstate
: rsp      04 ;							\ rsp
: rstack   05 ;							\ rbp = rstack
: rpc      06 ;							\ rsi = rpc
: rhere    07 ;							\ rdi = rhere
: rindex   0a ;							\ r10 = rindex
: rend     0c ;							\ r12 = rend
: rnext    0d ;							\ r13 = rnext
: rstack0  0f ;							\ r15 = rstack0

: #0 0 ;							\ Offset of the first available stack item
: #1 8 ;							\ Offset of the second stack item
: #2 10 ;							\ Offset of the third stack item

								\\ Basic assembler for r0-r7. Stack access is hardcoded

: `        c, ;							\ Compile single byte

: rex,     48 ` ;
: rex1,    49 ` ;

: ret,     c3 ` ;						\ ( -- )		ret

:: 1+      code rex, ff ` c1 ` ret,				\ ( n -- n+1)		inc	r0
:: 1-      code rex, ff ` c9 ` ret,				\ ( n -- n-1)		dec	r0

: shl1,    rex, c1 ` e2 ` ` ;					\ ( n -- )		shl	r0, n
:: shl1#3  code	3 shl1,	ret,					\ ( -- )		shl	r1, 3

: off,     rex, ff ` c5 ` ;					\ ( -- )		inc	rstack
: on,      rex, ff ` cd ` ;					\ ( -- )		dec	rstack
:: off     code off, ret,					\ ( a b -- b )

: (load,   rex1, 8b ` ;
: (store,  rex1, 89 ` ;
: load),   ef ` ` ;
: store),  ef ` ` ;
: load1,   (load, 54 ` #1 load), ;				\ ( -- )		mov	r1, [S+8]
:: load1   code load1, ret,

: (or),    rex, 09 ` ;
: or01,    (or), d1 ` ;						\ ( -- )		or	r0, r1
:: or01    code or01, ret,

: modrm,   c0 load1 shl1#3 or01 off load1 or01 ` ;		\ ( rd rs -- ) Compiles ModR/M byte

: or,	   (or), modrm, ;					\ ( rd rs -- )		or	Rd, Rs
:: or	   code load1, r0 r1 or, off, ret,

: (and),    rex, 21 ` ;
: and,	   (and), modrm, ;					\ ( rd rs -- )		and	Rd, Rs
:: and	   code load1, r0 r1 and, off, ret,

: (mov),   rex, 89 ` ;
: mov,     (mov), modrm, ;					\ ( rd rs -- )		mov	Rd, Rs	# s, d <= 7

: shl,     rex, d3 ` e0 or ` ;					\ ( rd -- )		shl	Rd, cl
:: shl     code load1, r1 shl, r0 r1 mov, off, ret,		\ ( n u -- u<<n )	mov	r1, [S+8] ; shl r1, r0l ; mov r0, r1 ; inc rstack	
: sar,     rex, d3 ` f8 or ` ;					\ ( rd -- )		sar	Rd, cl
:: sar     code load1, r1 sar, r0 r1 mov, off, ret,		\ ( n u -- u>>n )	mov	r1, [S+8] ; sal r1, r0l ; mov r0, r1 ; inc rstack	

: load,    (load,  3 shl 44 or ` load), ; 			\ ( # rd -- )		mov	Rd, [S+#]
: store,   (store, 3 shl 44 or ` store), ;		 	\ ( # rs -- )		mov	[S+#], Rs

								\ Basic subtraction is needed to implement control structures
: (add),   rex, 01 ` ;
: (sub),   rex, 29 ` ;
: add,     (add), 3 shl c0 or r0 or ` ;				\ ( rs -- )		add	r0, Rs
: sub,     (sub), c0 or r0 3 shl or ` ;				\ ( rd -- )		sub	Rd, r0
:: +       code #1 r1 load, r1 add, off, ret,			\ ( n1 n2 -- n1+n2 )	mov	r1, [S+8] ; add r0, r1 ; inc rstack
:: -       code #1 r1 load, r1 sub, r0 r1 mov, off, ret,	\ ( n1 n2 -- n1-n2 )	mov	r1, [S+8] ; sub r1, r0 ; mov r0, r1 ; inc rstack

								\\ Basic math continued
: 2/       1 sar ;						\ ( n -- n/2)

								\\ Cells									_core_core
: cell     8 ;							\ ( -- 8 )		Size of one cell
: cells    3 shl ;						\ ( n -- n*8 )		Convert size in cells to size in bytes
: cell/	   3 sar ;						\ ( n -- n/8 )		Convert size in bytes to size in cells
: cell+    cell + ;

								\\ Stack manipulation words with modern and fancy names not without visual semantics
: _,       #1 r0 load, off, ;					\ ( a -- )		drop
: |,       #0 r0 store, on, ;					\ ( a -- a a )		dup
: ><,      #1 r1 load, #1 r0 store, r0 r1 mov, ;		\ ( a b -- b a )	swap
: >|,      #1 r1 load, on, #1 r0 store, r0 r1 mov, ;		\ ( a b -- a b a )	over
: >|>|,    #1 r1 load, on, #1 r0 store, on, #1 r1 store, ;	\ ( a b -- a b a b )	2dup = over over
: >>>,     #1 r1 load, #2 r2 load,				\ ( a b c -- b c a )	rot
           #2 r1 store, #1 r0 store, r0 r2 mov, ;
: <<<,     #1 r1 load, #2 r2 load,				\ ( a b c -- c a b )	-rot
           #2 r0 store, #1 r2 store, r0 r1 mov, ;

:: _       code _, ret,
:: |       code |, ret,
:: ><      code ><, ret,
:: >|      code >|, ret,
:: >|>|    code >|>|, ret,
:: >>>     code >>>, ret,
:: <<<     code <<<, ret,

: #|       pick ;						\ WARNING! Generic PICK is not compileable, as it references an unknown stack element!
: >>|      2 pick ;

								\\ Memory access words
:: @       code rex, 8b ` 09 ` ret,				\ ( a -- [a] )		mov	r0, [r0]
:: c@      code rex, 0f ` b6 ` 09 ` ret,			\ ( a -- byte [a] )	movzx	r0, byte ptr [r0]

:: !       code #1 r1 load, rex, 89 ` 11 ` off, off,		\ ( n a -- )		mov	r1, [S+8] ; mov [r0], r1 ; inc rstack ; inc rstack 
           #0 r0 load, ret,					\			mov	r0, [S+8]
:: 4!       code #1 r1 load, 89 ` 11 ` off, off,		\ ( n a -- )		mov	r1, [S+8] ; mov [r0], r1 ; inc rstack ; inc rstack 
           #0 r0 load, ret,					\			mov	r0, [S+8]
:: c!      code #1 r1 load, rex, 88 ` 11 ` off, off,		\ ( n a -- )		mov	r1, [S+8] ; mov [r0], r1 ; inc rstack ; inc rstack 
           #0 r0 load, ret,					\			mov	r0, [S+8]

								\\ Variables and constants							_var_val
: adr      does> ;						\ :: a adr
: var      , does> ;						\ :: a 12345 var
: val      , does> @ ;						\ :: b 98765 val

								\\ States									_states
:: INTERPRETING  0 val
:: COMPILING    -2 val
:: DECOMPILING  -4 val
:: REGALLOCING  -6 val
:: ASSEMBLING   -8 val
:: DEALLOCING   -a val
								\\ Dictionary structure
: >cfa     cells + cell - cell - ;				\ ( xt state -- cfa )	Returns CFA for given state for XT
: cfa@     | @ >< cell + @ >< ;					\ ( cfa -- param code )	Returns param and code for CFA
: >cfa@    >cfa cfa@ ;						\ ( xt state -- param code)	Returns param and code for given state for XT

: >name    22 cells - @ ; 					\ ( xt -- c-addr )	Returns address of the name counted string

								\\ Control structures								_control
: >mark    here 0 , ;						\ ( -- a )		Address for forward branch fixup
: >resolve | here >< - cell/ 1- >< ! ;				\ ( a -- )		Fixup forward branch

: <mark    here ;						\ ( -- a )		Address for backward branch fixup
: <resolve here  - cell/ 1- , ;

								\ These words do the job during register allocation and do nothing during execution
: (if) ;
: (else-pre) ;
: (else-post) ;
: (then) ;
: (begin) ;
: (until) ;
: (again) ;
: (ahead) ;
: (while) ;
: (repeat-pre) ;
: (repeat-post) ;
: (continue) ;
: (break) ;
								\ ... begin ... -? until ...
								\ ... begin ... again ...
								\ ... begin ... ? while ... repeat ...	
								\ ... begin ... ? continue ... ? break ... [while] ... repeat|again ... then	
								\ TODO: Allow for multiple BREAKs, as with CONTINUE

: if       compile (if) compile ?branch >mark ; immediate
: else     compile (else-pre) compile branch >mark compile (else-post) >< >resolve ; immediate
: then     compile (then) >resolve ; immediate
: begin    compile (begin) <mark ; immediate
: until    compile (until) compile ?branch <resolve ; immediate
: again    compile (again) compile branch <resolve ; immediate
: ahead    compile (ahead) compile branch >mark ; immediate
: while    compile (while) compile ?branch >mark ; immediate
: repeat   compile (repeat-pre) compile branch >< <resolve compile (repeat-post) >resolve ; immediate
: continue compile (continue) compile -?branch | <resolve ; immediate
: break    compile (break) compile -?branch >mark >< ; immediate

								\\ Search									_search
: '        bl word _ find					\ ( "<name>" -- xt | E )
           | if else badd1c 071cf10d .abort then ;
: compile, , ;							\ ( xt -- )		Compiles XT on the top of the stack into current definition
: [compile] ' compile, ; immediate				\ ( "<name>" -- )	Compiles XT of the next word in the input stream
: [']      ' [compile] literal ; immediate			\ ( "<name>" -- )	Compiles XT of the next word in the input stream as a literal
								\			Syntactic sugar
								\\ Printing									_print
: ."       [compile] " compile count compile type ; immediate
: abort"   compile cr compile red [compile] ." compile norm compile cr compile abort ; immediate

								\\ Improved assembler, r0-15 support						_assembler
: rex      150b501e7e 0c0de .abort ;				\ Obsolete
: rex.     40 ;
: rex.b    rex. ;						\ REX operand size determined by CS.D
: rex.q    rex. 08 or ;						\ REX specifies 64-bit operands
: rex?     08 and ;						\ ( r -- f )	 	Checks if R is an extended regsiter (R8-R15)
: rex.rd   >< rex? if 01 or then ;				\ ( rd rex' -- rex'' )	REX part with Rd bit set
: rex.rs   >< rex? if 04 or then ;				\ ( rd rex' -- rex'' )	REX part with Rd bit set
: rexrr.q  rex.q rex.rs rex.rd ;				\ ( rd rs -- rex )	Returns REX prefix for Rd and Rs
: rexrd.q  rex.q rex.rd ;					\ ( rd -- rex )		Returns REX prefix for Rd
: rexrs.q  rex.q rex.rs ;					\ ( rs -- rex )		Returns REX prefix for Rs
: rd       07 and ;						\ ( rd -- modrm' )	Returns ModR/M byte part for Rd
: rs       07 and 3 shl ;						\ ( rs -- modrm' )	Returns ModR/M byte part for Rs
: rr       c0 ;							\ (  -- modrm' )	Returns ModR/M byte part for RR
: modrr    rs >< rd or rr or ;					\ ( rd rs -- modrm )	Returns ModR/M byte for Rd and Rs
: modro    >< rd or rr or ;					\ ( rd op -- modrm )	Returns ModR/M byte for Rd and opcode
: instrr   c, does> <<< >|>| rexrr.q ` >>> c@ ` modrr ` ;	\ ( op -- ) ( rd rs a -- )
: instro   c, c, does> >< | rexrd.q ` >< | c@ `			\ ( op1 op2 -- ) ( rd a -- )
           1+ c@  modro ` ;
: instroi4 c, c, does> >< <<< >< | rexrd.q ` >< | c@ `		 \ ( op1 op2 -- ) ( rd imm32 a  -- )
           1+ c@  modro ` 4, ;
: instroi1 c, c, does> >< <<< >< | rexrd.q ` >< | c@ `		 \ ( op1 op2 -- ) ( rd imm8 a  -- )
           1+ c@  modro ` c, ;
: instpp   c, does> c@ >< | rex? if 41 ` then 7 and or ` ; 	\ ( op -- ) ( rd a -- )	Push/pop instruction

								\\ Condition codes and conditional set instructions
:: .o      00 val
:: .no     01 val
:: .b      02 val
:: .nae    02 val
:: .nb     03 val
:: .ae     03 val
:: .e      04 val
:: .z      04 val
:: .ne     05 val
:: .nz     05 val
:: .be     06 val
:: .na     06 val
:: .nbe    07 val
:: .a      07 val
:: .s      08 val
:: .ns     09 val
:: .p      0a val
:: .pe     0a val
:: .np     0b val
:: .po     0b val
:: .l      0c val
:: .nge    0c val
:: .nl     0d val
:: .ge     0d val
:: .le     0e val
:: .ng     0e val
:: .nle    0f val
:: .g      0f val

:: setf.op 90 val						\ SETcc opcode
: setf,    rex.b ` 0f ` setf.op or ` rd rr or ` ;		\ ( rd cond -- )	set.cc rd

:: j.op    70 val						\ Jcc opcode
: j,       j.op or ` ` ;					\ ( offset cond -- )	j.cc	offset8

:: lj.op   80 val						\ lJcc opcode		Long jump conditional
: lj,      0f ` lj.op or ` 4, ;					\ ( offset cond -- )	j.cc	offset32

: sjmp,    eb ` ` ;						\ ( offset -- )         Short jump
: ljmp,    e9 ` 4, ;						\ ( offset -- )         Long/near jump
								\\ Arithmetic, logic and moves
:: movzx.op b6 val						\ MOVZX opcode
: movzx,   rex.q ` 0f ` movzx.op ` modrr ` ;			\ ( rd rs -- )		movzx	rdl, rs

:: mov,    89 instrr						\ ( rd rs -- )		mov	rd, rs
:: test,   85 instrr						\ ( rd rs -- )		test	rd, rs
:: add,    01 instrr						\ ( rd rs -- )		add	rd, rs
:: sub,    29 instrr						\ ( rd rs -- )		sub	rd, rs
:: or,     09 instrr						\ ( rd rs -- )		or	rd, rs
:: and,    21 instrr						\ ( rd rs -- )		and	rd, rs
:: xor,    31 instrr						\ ( rd rs -- )		xor	rd, rs
:: cmp,    39 instrr						\ ( rd rs -- )		cmp	rd, rs

:: inc,    00 ff instro						\ ( rd -- )		inc	rd
:: dec,    08 ff instro						\ ( rd -- )		dec	rd
:: jmp,    e0 ff instro						\ ( rd -- )		jmp	rd
:: neg,    d8 f7 instro						\ ( rd -- )		neg	rd
:: not,    d0 f7 instro						\ ( rd -- )		not	rd

:: mov.i,  00 c7 instroi4					\ ( rd imm32 -- )	mov	rd, imm32
:: add.i,  c0 83 instroi1
:: sub.i,  e8 83 instroi1

:: push,   50 instpp						\ ( rs -- )		push	rs
:: pop,    58 instpp						\ ( rd -- )		pop	rd

: nop,     90 ` ;

: setnz0,  r0 .nz setf,    48 ` 0f ` b6 ` c9 ` ;		\ 			setnz	cl ; movzx rcx, cl
: setz0,   r0 .z setf,     48 ` 0f ` b6 ` c9 ` ;		\ 			setz	cl ; movzx rcx, cl

:: =       code #1 r1 load, r0 r1 cmp, setz0, off, ret,		\ ( a b -- a=b )	Compare two top elements, return 1 if equal and 0 otherwise

: lodsq,   48 ` ad ` ;						\			lodsq	rax, qword ptr [rsi]
: skip,    48 ` 8d ` 34 ` c6 ` ;				\			lea	rsi, [rsi + rax*8]

:: skip    code rtmp pop, rwork pop, 				\ ( -- )		Skip next address interpreter word TODO: make single ADD
		rwork inc, rwork inc, rwork inc, rwork inc,
		rwork inc, rwork inc, rwork inc, rwork inc,
		rwork push, rtmp push, ret,
:: @skip   code |, rtmp pop, rwork pop,				\ ( -- a )		Skip next address interpreter word, and return it
                48 ` 8b ` 08 `         				\			mov rtop, [rwork]
		rwork inc, rwork inc, rwork inc, rwork inc,
		rwork inc, rwork inc, rwork inc, rwork inc,
		rwork push, rtmp push, ret,

:: self    code |, rtop rpc mov, rtop 8 sub.i, ret,		\ ( a -- )		Returns RPC for the calling word
								\			If SELF if the first compiled word, it returns caller's XT

								\\ Here
:: here!   code rhere rtop mov, _, ret,
								\\ Return stack									_return_stack
:: >r      code r1 pop, r0 push, _, r1 push, ret,		\ ( a -- ) ( R: -- a)	Pushes top of parameter stack onto return stack
:: r>      code |, r1 pop, r0 pop, r1 push, ret,		\ ( -- a ) ( R: a -- )	Pops top of parameter stack off return stack
: {        compile >r ;	immediate
: }        compile r> ;	immediate
								\\ Control structures: loops							_loops
								\ DOC: https://github.com/TG9541/stm8ef/wiki/eForth-FOR-..-NEXT
:: (for)   code rtmp pop, rwork pop, rindex push,  		\ ( n -- )		push rindex; mov rindex, rtop ; drop
                rindex r0 mov,
                rwork push, rtmp push, _, ret,
: (aft) ;
:: I       code |, r0 rindex mov, ret,				\ ( -- I )		Returns FOR loop index
:: (over)  code rindex dec, lodsq, 4 .z j, skip, ret,		\ ( -- )		dec rindex ; lodsq ; jz ret ; rpc+=ofs ; ret
:: (over-post) code
                rtmp pop, rwork pop, rindex pop, 
		rwork push, rtmp push, ret,
' branch DECOMPILING >cfa@ DECOMPILING ' (over) does

:: (-leave) code 						\ ( f -- )		Leave FOR loop if the flag is false
           rtmp rtop mov,
	   _, lodsq, rtmp rtmp test, 1 .z j, ret,
	   skip,
	   rtmp pop, rwork pop, rindex pop,
	   rwork push, rtmp push, ret,
' branch DECOMPILING >cfa@ DECOMPILING ' (-leave) does


: for      compile (for) <mark ; immediate			\ ... n for ... [ aft ] ... [ then ] ... over ...
								\ TODO: ?FOR would be nice to have, but it's needed to pass a flag to OVER to compile THEN
								\       This can be implemented after there is a control stack with checks and other flags
: aft      compile (aft) compile branch _ >mark <mark >< ; immediate
: -leave   compile (-leave) >mark >< ; immediate		\ TODO: BUG! Incompatible with nested FORs as it is now
: over     compile (over) <resolve compile (over-post) ; immediate

								\\ Stack manipulation, continued
: #_       | if for _ over else _ then ;			\ ( a1 ... an n -- )	Drops N elelemns off stack (including count)
: >|>|>|   { >|>| } | { <<< } ; 				\ ( a b c -- a b c a b c ) 3OVER

								\\ Arithmetic and logic, continued
:: not     code r0 not, ret,
:: negate  code r0 neg, ret,
								\\ Memory									_memory
: fill     <<< for >|>| c! 1+ over _ _ ;			\ ( a n c -- )	Fill N bytes from address A with character C
: 1+!      | @ 1+ >< ! ;				 	\ ( a -- )		Increment variable at A

								\\ Stack									_stack
								\ Structure: pointer limit data...
: stack   0 , | , cells allot does> ;				\ ( n -- ) ( -- stack )	Stack N cells size
: empty   0 >< ! ;							\ ( s -- )		Empty stack
: stack@  | @ >| cell+ @ ;					\ ( stack -- stack pointer limit )	Extracts stack parameters onto data stack
: .stack  | @ | if >< cell+ cell+ >< for | @ . cell+ over _	\ ( stack -- )
          else _ _ then ;

: >s      | @ >| cell+ @					\ ( a stack -- | E )    Pushes element onto stack or aborts on overflow
	  >| - if						\ ( a stack sp limit )	Check if stack about to overflow
	  >|>| 1+ >< !						\ ( a stack sp )	Increment stack pointer
          cells + cell+ cell+ !					\ ( a stack sp )	Store element
	  else _ >name count type bl emit
	  0add bad57ac .abort then ;				\ 			Stack overflow

: s>      | @ | if						\ ( stack -- a | E )	Pops element off stack or aborts on underflow
          1- >|>| >< !						\ ( stack sp )		Decrement stack pointer
          cells + cell+ cell+ @					\ ( stack sp )		Fetch element
	  else _ >name count type bl emit
	  05bb bad57ac .abort then ;				\			Stack underflow

