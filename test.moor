cr
cr
.\ **** TESTS ****
cr
cr
cold
10 ofs-is-long .. 
-10 ofs-is-long .. 
ff ofs-is-long .. 
100 ofs-is-long .. 
7f ofs-is-long .. 
80 ofs-is-long .. 
-7f ofs-is-long .. 
-80 ofs-is-long .. 
-81 ofs-is-long .. 


								\\ Simpler examples, w/o Phi junctions


: q  1 3 | <<< >| - ;
q ..
cold
:^ 0 ^.> q
#_
cold
:^ 0 ^> q
#_


: q  - + | { - } - ;
1 2 3 4 q ..
: qq 1 2 3 4 q ;
qq ..
cold
:^ ?^ ?^ ?^ ?^ 4 ^.> q 
cold
:^ ?^ ?^ ?^ ?^ 4 ^> q 
#_

1017 c0de .abort

: q 1 | | | 1+ + >< 1+ + >< 1+ 1+ 1+ + 1+ 1+ ;
q ..
:^ 0 ^> q
#_

:^ 0 ^> qq 
#_
: q >| { + + } + ;
:^ ?^ ?^ ?^ 3 ^> q 
#_
: q >|>| { { + + } } + >< + ;
:^ ?^ ?^ ?^ 3 ^> q 
#_
: q >|>| { { - + } } - >< - ;
:^ ?^ ?^ ?^ 3 ^> q 
#_

: cs-for0 0 >< for I + over ;
1 cs-for0 .. 
2 cs-for0 .. 
ff cs-for0 .. 

cold
:^ ?^ 1 ^.> cs-for0 
cold
:^ ?^ 1 ^> cs-for0 
#_


: cs-for00 for over ;
1 cs-for00 .S 
2 cs-for00 .S 

cold
:^ ?^ 1 ^> cs-for00
#_

: cs-for1 for I ?? | 1- 1- -leave yellow . norm over 2a emit | then 2b emit _ ;
1 cs-for1 .S 
2 cs-for1 .S 
3 cs-for1 .S 
4 cs-for1 .S 

see cs-for1
cold
:^ ?^ 1 ^.> cs-for1 
cold
:^ ?^ 1 ^> cs-for1 
#_

: cs-for2 cr | for I >< | for >| I + .. over >< _ cr over _ ;
1 cs-for2 cr 
2 cs-for2 cr 
3 cs-for2 cr 
4 cs-for2 cr 

cold
:^ ?^ 1 ^.> cs-for2 
cold
:^ ?^ 1 ^> cs-for2 
#_

cold
: cs-if0 1 >< | if + else - then noop ;
: cs-if1 1 >< | if 11 + else - 55 then + ;
: cs-if2 1 >< | if >< then noop - ;
0 cs-if0 .. 
1 cs-if0 .. 
2 cs-if0 .. 
0 cs-if1 .. 
1 cs-if1 .. 
2 cs-if1 .. 
0 cs-if2 .. 
1 cs-if2 .. 
2 cs-if2 .. 
cold
:^ ?^ 1 ^.> cs-if0 
cold
:^ ?^ 1 ^> cs-if0 
#_

cold
:^ ?^ 1 ^.> cs-if2 
cold
:^ ?^ 1 ^> cs-if2 
#_
cold
:^ ?^ 1 ^> cs-if0 
#_

cold
:^ ?^ 1 ^> cs-if1 
#_

: cs-if3 2 >< | | if 1 >< - then - - ;
cold 0 cs-if3 .S 
cold 1 cs-if3 .S 
cold 2 cs-if3 .S 
cold 3 cs-if3 .S 
cold
:^ ?^ 1 ^> cs-if3 
#_
.( φ *** FALSE branch has two copies of a value [ 1 0 0 ], while TRUE branch produces different values [ 1 0 2 ]. How to merge these?  )

: cs-for1 { 0 1 2 } for I + <<< over - + ;
1 cs-for1 ..
2 cs-for1 ..
3 cs-for1 ..
4 cs-for1 ..
5 cs-for1 ..
ff cs-for1 ..
cr
cold
:^ ?^ 1 ^.> cs-for1 
cold
:^ ?^ 1 ^> cs-for1 
#_


cold
: fib      | if 0 1 >>> for >| + >< over _ then noop ;
cold
0 fib ..  
1 fib ..  
2 fib ..  
3 fib ..  
4 fib ..  
5 fib ..  
6 fib ..  
7 fib ..  
8 fib ..  
9 fib ..  

see fib

cold
:^ ?^ 1 ^.> fib 
cold
:^ ?^ 1 ^> fib 
#_  
.( φ *** NOOP is added because EXIT is not compiled yet. This will be solved later )
.( φ *** Temporary register should be allocated only if swap is to be performed. How to detect it? )

cold
: cs-if3 { 11 22 33 } if <<< then - + noop ;
0 cs-if3 ..
1 cs-if3 ..
:^ ?^ 1 ^> cs-if3
#_

: <<<< \ a b c d -- d a b c
  >< >r <<< r> ;
cold 11 22 33 44 <<<< .S
: cs-if4 { 11 22 33 44 } if <<<< then - + - noop ;
0 cs-if4 ..
1 cs-if4 ..
cold
:^ ?^ 1 ^> cs-if4
#_

: fib3     | if { 0 1 2 } for >>> >>| >>| + + over <<< _ _ then noop ;
cold
0 fib3 ..  
1 fib3 ..  
2 fib3 ..  
3 fib3 ..  
4 fib3 ..  
5 fib3 ..  
6 fib3 ..  
7 fib3 ..  
8 fib3 ..  
9 fib3 ..  

cold
:^ ?^ 1 ^.> fib3
cold
:^ ?^ 1 ^> fib3
#_

.(  φ Fib3 WORKS!!! Well, mov r0, r0... But this is another problem. Let's look for more serious ones first )

: cs-1 1 2 begin >< again ;
cold
:^ 0 ^> cs-1 


: cs-2 { 11 33 } begin 1- | while { >< } repeat _ - ;
1 cs-2 .. 
2 cs-2 .. 
3 cs-2 .. 
4 cs-2 .. 
cold
:^ ?^ 1 ^> cs-2  
#_

c0de 42 .abort

cold
: cs4 3 begin 30 emit 1- | continue 31 emit >< | break 32 emit | 1+ while 33 emit _ 1 1 repeat 34 emit then 35 emit ;
\ : cs5 41 3 begin 30 emit { 1+ ?? } 1- | continue 31 emit { 1+ ?? } 2 pick break 32 emit { 1+ ?? } | while 33 emit { 1+ ?? } repeat 34 emit { 1+ ?? } then _ 35 emit emit _ 36 emit ;
: cs5 41 3 begin 30 emit { 1+ } 1- | continue 31 emit { 1+ } >>| break 32 emit { 1+ } | 1+ while 33 emit _ >< _ 1 >< 2 repeat 34 emit { 1+ } then _ 35 emit red emit norm _ 36 emit ;
: cs50 41 3 begin { 1+ } 1- | continue { 1+ } >>| break { 1+ } | 1+ while _ >< _ 1 >< 2 repeat { 1+ } then _ emit _ ;
0 cs4 
1 cs4
cold
0 cs5 .S 
cold
1 cs5 .S 
cold
0 cs50 .S 
cold
1 cs50 .S 
cold
:^ ?^ 1 ^> cs50 #_


600df00d 0c0de .abort


2 3 + ..
10203040 ..

.\ Variables and constants
:: a 12345 var
:: b 98765 val

: qq b .. ;
qq

: q
  a | .. @ ..
  b | .. a !
  a | .. @ ..
;
333 | .. q ..

.\ Control structures
16 cell/ .

: q branch [ >mark >resolve ] ;
q
: q branch [ >mark ] 98765 .. [ >resolve ] ;
q
: q ?branch [ >mark ] abcdef .. [ >resolve ] ;
0 q
1 q
: q 5 [ <mark ] 2a emit 1- | ?branch [ <resolve ] ;
q
: q ?branch [ >mark ]  31 .. branch [ >mark >< >resolve ]  30 .. [ >resolve ]  .. 39 .. ;
33 1 q
33 0 q
: cs1 if 31 .. else 30 .. then .. 39 .. ;
33 1 cs1
33 0 cs1
: cs2 0 begin 2a emit 1+ until 2b emit ;
cs2
: cs3 5 begin 2a emit 1- | while 2b emit repeat 2a emit ;
cs3
: cs4 3 begin 30 emit 1- | continue 31 emit >< | break 32 emit | while 33 emit repeat 34 emit then 35 emit ;
0 cs4 
1 cs4 

.\ Decompiler
\ see >resolve
see repeat
see while
see else
see val
see cs1
see cs2
see cs3
see cs4

.\ Stack manipulation words
98 99 - ..
33 | .. .. cr
33 34 42 _ .. .. cr
99 11 22 33 >>> .. .. .. 
99 11 22 33 <<< .. .. .. 

2 3 >| 1+ 1+ \ 2 3 4
cr .. .. .. cr
1 2 >|>| .. .. .. .. 

.\ Assembler
3 1 2 and .. .. 


r2 r2 rexrr.q .. 
r1 r0 rexrr.q .. 
r0 r1 rexrr.q .. 
r0 rindex rexrr.q .. 
rindex r0 rexrr.q .. 
r0 rindex rexrr.q .. 
r2 r2 modrr .. 
r0 r0 modrr .. 
r0 r2 modrr .. 
r2 r0 modrr .. 

:: q code r0 r0 mov, ret,
13 q .. 

rindex r0 rexrs.q .. 
r0 rindex rexrs.q .. 

: q for 2a emit aft 2b emit then 2c emit I . over cr ;
5 q

\ : fib 
\  | if | 1- if 1- | 1- fib >< fib + then then ;

see fib

0 fib .. cr 
1 fib .. cr 
2 fib .. cr 
3 fib .. cr 
4 fib .. cr 
5 fib .. cr 
6 fib .. cr 
7 fib .. cr 
8 fib .. cr 
9 fib .. cr 

\ : fib \ n
\   0 1 >>> for >| + >< over _ ;

\ see fib

1 fib .. cr 
2 fib .. cr 
3 fib .. cr 
4 fib .. cr 
5 fib .. cr 
6 fib .. cr 
7 fib .. cr 
8 fib .. cr 
9 fib .. cr 

\ : q abort" AAA!" ;		Need (") implemented to make this work

: q        2a emit ;
% q        2b emit %;
q
\ regalloc q
\ q
\ 88 99 regalloc | .. .. ..
\ 88 11 22 regalloc + .. ..
\ 88 11 22 regalloc + .. ..
\ : q + + ;
\ :^ ?^ ?^ ?^ 3 ^> q .. 
\ see fib
\ :^ ?^ 1 ^> fib
: q for I . over ;
99 40 q ..

see cs4
cold
:^ ?^ 1 cr .S cr  ^> cs4

cold
:: reg-stack 3 stack
reg-stack stack@ .S
10 reg-stack >s
20 reg-stack >s
30 reg-stack >s
reg-stack stack@ .S
cr .S reg-stack cr .S cr 
\ see .stack

reg-stack trace .stack notrace
reg-stack s> ..
reg-stack s> ..
reg-stack s> ..

reg-stack stack@ .S

cold
11 22 33 44 55 .S cr
0 #| .. 1 #| .. 2 #| .. 3 #| .. 4 #| ..

words
.\ Tests finished successfully

